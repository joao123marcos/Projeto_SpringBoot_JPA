package com.CursoJava_JPA_Hibernate.Curso.Repositories;

import org.springframework.data.jpa.repository.JpaRepository;

import com.CursoJava_JPA_Hibernate.Curso.entities.User;

public interface UserRepository extends JpaRepository<User, Long> {

}

  //S√≥ com isso eu j√° consigo ter meios de acessar o banco  
 /*No JPA (Java Persistence API), um Repository (Reposit√≥rio) √© uma abstra√ß√£o que representa 
   uma cole√ß√£o de objetos de uma determinada entidade (como Cliente, Produto, etc.) armazenados 
   no banco de dados. Ele serve como uma camada intermedi√°ria entre a sua l√≥gica de neg√≥cios e 
   os mecanismos de persist√™ncia de dados.
   
   Basicamente, ele te ajuda a separar as preocupa√ß√µes: sua aplica√ß√£o n√£o precisa saber como os 
   dados s√£o de fato salvos, atualizados ou buscados no banco. Ela apenas interage com o 
   reposit√≥rio.
   
   - Para que serve um Repository? ü§î
   A principal fun√ß√£o de um reposit√≥rio √© encapsular a l√≥gica de acesso a dados. Isso significa 
   que todas as opera√ß√µes relacionadas √† persist√™ncia (salvar, buscar, atualizar, deletar) para 
   uma entidade espec√≠fica ficam concentradas em um √∫nico lugar.
   
   Pense nele como um "gerente" para suas entidades no banco de dados.
   
   - Por que voc√™ precisa de um Repository? üí°
   Voc√™ precisa de um reposit√≥rio por v√°rios motivos importantes:
   
    * Abstra√ß√£o do acesso a dados: Ele esconde os detalhes de como a persist√™ncia √© implementada 
      (se √© JDBC puro, Hibernate, EclipseLink, etc.). Se voc√™ precisar trocar o provedor JPA no 
      futuro, o impacto na sua l√≥gica de neg√≥cios ser√° m√≠nimo.
    
    * C√≥digo mais limpo e organizado: Centraliza as consultas e opera√ß√µes de banco de dados, 
      tornando seu c√≥digo mais f√°cil de entender, manter e testar. Em vez de espalhar EntityManager.
      persist(), EntityManager.find(), etc., por toda a sua aplica√ß√£o, voc√™ chama m√©todos do 
      reposit√≥rio (ex: clienteRepository.salvar(cliente)).
    
    * Facilita testes unit√°rios: Voc√™ pode facilmente "mockar" (simular) um reposit√≥rio durante os 
      testes, permitindo testar sua l√≥gica de neg√≥cios sem a necessidade de um banco de dados real.
    
    * Reutiliza√ß√£o de c√≥digo: Consultas complexas podem ser definidas uma vez no reposit√≥rio e 
      reutilizadas em v√°rias partes da sua aplica√ß√£o.
    
    * Implementa√ß√£o de padr√µes de projeto: Segue o padr√£o de projeto "Repository", que √© uma 
      pr√°tica recomendada para construir aplica√ß√µes robustas e escal√°veis.

   Qual √© a sua fun√ß√£o? ‚öôÔ∏è
   A fun√ß√£o de um reposit√≥rio √© fornecer m√©todos para realizar opera√ß√µes CRUD (Create, Read, 
   Update, Delete) e outras consultas personalizadas sobre as entidades.

   Exemplos comuns de m√©todos que voc√™ encontraria em um reposit√≥rio:
   save(Entidade): Salva ou atualiza uma entidade no banco.
   findById(id): Busca uma entidade pelo seu identificador.
   findAll(): Busca todas as entidades de um tipo.
   delete(Entidade): Remove uma entidade do banco.
   deleteById(id): Remove uma entidade pelo seu identificador.
   M √©todos de consulta personalizados (ex: findByNome(String nome), 
   findByPrecoMaiorQue(BigDecimal preco)).

   Frameworks como o Spring Data JPA simplificam enormemente a cria√ß√£o de reposit√≥rios. 
   Muitas vezes, voc√™ s√≥ precisa definir uma interface que estende JpaRepository 
   (ou outra interface similar) e o Spring automaticamente implementa os m√©todos b√°sicos para voc√™.
   
   https://docs.google.com/document/d/1iuLP1evpestf6nN0F0vHubhuN9_1I4tSA9t-bvwqqFw/edit?usp=sharing
   */

